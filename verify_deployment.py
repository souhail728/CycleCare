#!/usr/bin/env python3
"""
Script de v√©rification avant d√©ploiement Railway
"""
import os
import sys
import subprocess
import importlib.util

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description} manquant: {filepath}")
        return False

def check_python_import(module_name):
    """V√©rifie qu'un module Python peut √™tre import√©"""
    try:
        __import__(module_name)
        print(f"‚úÖ Import {module_name}: OK")
        return True
    except ImportError as e:
        print(f"‚ùå Import {module_name}: {e}")
        return False

def run_tests():
    """Ex√©cute les tests automatis√©s"""
    try:
        result = subprocess.run(
            ["python", "test_basic.py"], 
            capture_output=True, 
            text=True, 
            timeout=60
        )
        if result.returncode == 0:
            print("‚úÖ Tests automatis√©s: PASS√âS")
            return True
        else:
            print("‚ùå Tests automatis√©s: √âCHEC")
            print(result.stderr)
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå Tests automatis√©s: TIMEOUT")
        return False
    except Exception as e:
        print(f"‚ùå Tests automatis√©s: ERREUR - {e}")
        return False

def check_app_startup():
    """V√©rifie que l'application peut d√©marrer"""
    try:
        # Test d'import de l'application
        from app import app, db
        
        # Test de cr√©ation du contexte
        with app.app_context():
            db.create_all()
        
        print("‚úÖ D√©marrage application: OK")
        return True
    except Exception as e:
        print(f"‚ùå D√©marrage application: {e}")
        return False

def main():
    """Fonction principale de v√©rification"""
    print("üîç V√©rification de D√©ploiement CycleCare")
    print("=" * 50)
    
    all_checks_passed = True
    
    # 1. V√©rification des fichiers essentiels
    print("\nüìÅ Fichiers essentiels:")
    essential_files = [
        ("app.py", "Application principale"),
        ("start.py", "Script de d√©marrage Railway"),
        ("requirements.txt", "D√©pendances Python"),
        ("Procfile", "Configuration Railway"),
        ("runtime.txt", "Version Python"),
        ("railway.json", "Configuration Railway JSON")
    ]
    
    for filepath, description in essential_files:
        if not check_file_exists(filepath, description):
            all_checks_passed = False
    
    # 2. V√©rification des templates
    print("\nüé® Templates:")
    template_files = [
        ("templates/base.html", "Template de base"),
        ("templates/index.html", "Page d'accueil"),
        ("templates/add_cycle.html", "Formulaire d'ajout"),
        ("templates/calendar.html", "Calendrier"),
        ("templates/history.html", "Historique")
    ]
    
    for filepath, description in template_files:
        if not check_file_exists(filepath, description):
            all_checks_passed = False
    
    # 3. V√©rification des fichiers statiques
    print("\nüéØ Fichiers statiques:")
    static_files = [
        ("static/css/style.css", "Styles CSS"),
        ("static/js/main.js", "JavaScript")
    ]
    
    for filepath, description in static_files:
        if not check_file_exists(filepath, description):
            all_checks_passed = False
    
    # 4. V√©rification des d√©pendances Python
    print("\nüêç D√©pendances Python:")
    dependencies = ["flask", "flask_sqlalchemy"]
    
    for dep in dependencies:
        if not check_python_import(dep):
            all_checks_passed = False
    
    # 5. Test de d√©marrage de l'application
    print("\nüöÄ Test de d√©marrage:")
    if not check_app_startup():
        all_checks_passed = False
    
    # 6. Tests automatis√©s
    print("\nüß™ Tests automatis√©s:")
    if not run_tests():
        all_checks_passed = False
    
    # 7. V√©rification de la configuration Railway
    print("\nüöÇ Configuration Railway:")
    
    # V√©rifier le contenu du Procfile
    try:
        with open("Procfile", "r") as f:
            procfile_content = f.read().strip()
            if "python start.py" in procfile_content:
                print("‚úÖ Procfile: Configuration correcte")
            else:
                print(f"‚ùå Procfile: Configuration incorrecte - {procfile_content}")
                all_checks_passed = False
    except Exception as e:
        print(f"‚ùå Procfile: Erreur de lecture - {e}")
        all_checks_passed = False
    
    # V√©rifier runtime.txt
    try:
        with open("runtime.txt", "r") as f:
            runtime_content = f.read().strip()
            if runtime_content.startswith("python-3."):
                print(f"‚úÖ Runtime: {runtime_content}")
            else:
                print(f"‚ùå Runtime: Version incorrecte - {runtime_content}")
                all_checks_passed = False
    except Exception as e:
        print(f"‚ùå Runtime: Erreur de lecture - {e}")
        all_checks_passed = False
    
    # 8. R√©sum√© final
    print("\n" + "=" * 50)
    if all_checks_passed:
        print("üéâ TOUTES LES V√âRIFICATIONS PASS√âES!")
        print("‚úÖ Votre application est pr√™te pour Railway")
        print()
        print("üöÄ Prochaines √©tapes:")
        print("1. G√©n√©rez une cl√© secr√®te: python generate_secret_key.py")
        print("2. D√©ployez sur Railway: python deploy_railway.py")
        print("3. Configurez les variables d'environnement")
        print("4. Testez votre application en ligne")
        return True
    else:
        print("‚ùå CERTAINES V√âRIFICATIONS ONT √âCHOU√â")
        print("üîß Corrigez les probl√®mes avant de d√©ployer")
        print()
        print("üí° Conseils:")
        print("- V√©rifiez que tous les fichiers sont pr√©sents")
        print("- Installez les d√©pendances: pip install -r requirements.txt")
        print("- Testez localement: python start.py")
        return False

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  V√©rification annul√©e")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)
